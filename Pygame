import pygame
import random

# Constants
WIDTH, HEIGHT = 300, 600
BLOCK_SIZE = 30
GRID_WIDTH = WIDTH // BLOCK_SIZE
GRID_HEIGHT = HEIGHT // BLOCK_SIZE
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
# Tetromino shapes
SHAPES = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[1, 1, 1], [0, 1, 0]],
    [[1, 1, 1], [1, 0, 0]],
    [[1, 1, 1], [0, 0, 1]],
    [[1, 1, 1], [0, 1, 1]],
    [[1, 1, 1], [1, 1, 0]]
]

# Colors for tetrominos
COLORS = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (0, 255, 255), (255, 0, 255), (128, 128, 128)]

# Initialize Pygame
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tetris")

# Initialize variables
grid = [[0 for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]
current_tetromino = None
current_shape = None
current_color = None
x, y = 0, 0

# Functions
def draw_grid():
    for row in range(GRID_HEIGHT):
        for col in range(GRID_WIDTH):
            color = grid[row][col]
            if color:
                pygame.draw.rect(screen, color, (col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))
            pygame.draw.rect(screen, WHITE, (col * BLOCK_SIZE, row * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 1)

def new_tetromino():
    global current_tetromino, current_shape, current_color, x, y
    x = GRID_WIDTH // 2 - 1
    y = 0
    current_shape = random.choice(SHAPES)
    current_color = random.choice(COLORS)
    current_tetromino = [[current_color if cell else 0 for cell in row] for row in current_shape]

def check_collision():
    for row in range(len(current_tetromino)):
        for col in range(len(current_tetromino[0])):
            if current_tetromino[row][col] and (x + col < 0 or x + col >= GRID_WIDTH or y + row >= GRID_HEIGHT or grid[y + row][x + col]):
                return True
    return False

def clear_rows():
    global grid
    full_rows = [row for row in range(GRID_HEIGHT) if all(grid[row])]
    for row in full_rows:
        del grid[row]
        grid.insert(0, [0] * GRID_WIDTH)

def draw_tetromino():
    for row in range(len(current_tetromino)):
        for col in range(len(current_tetromino[0]):
            if current_tetromino[row][col]:
                pygame.draw.rect(screen, current_color, ((x + col) * BLOCK_SIZE, (y + row) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

def main():
    global x, y, grid

    new_tetromino()
    game_over = False
    clock = pygame.time.Clock()

    while not game_over:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    x -= 1
                    if check_collision():
                        x += 1
                if event.key == pygame.K_RIGHT:
                    x += 1
                    if check_collision():
                        x -= 1
                if event.key == pygame.K_DOWN:
                    y += 1
                    if check_collision():
                        y -= 1

        y += 1
        if check_collision():
            y -= 1
            for row in range(len(current_tetromino)):
                for col in range(len(current_tetromino[0]):
                    if current_tetromino[row][col]:
                        grid[y + row][x + col] = current_color
            clear_rows()
            new_tetromino()
            if check_collision():
                game_over = True

        screen.fill(BLACK)
        draw_grid()
        draw_tetromino()
        pygame.display.flip()
        clock.tick(5)

    pygame.quit()

if __name__ == "__main__":
    main()

def rotate_tetromino():
    global current_tetromino
    current_tetromino = [list(row) for row in zip(*reversed(current_tetromino))]
    if check_collision():
        # Revert the rotation if it causes a collision
        current_tetromino = [list(row) for row in zip(*current_tetromino)]

def display_game_over():
    font = pygame.font.Font(None, 36)
    text = font.render("Game Over", True, WHITE)
    screen.blit(text, (WIDTH // 2 - 70, HEIGHT // 2 - 20))
    pygame.display.flip()
    pygame.time.wait(2000)  # Display for 2 seconds
